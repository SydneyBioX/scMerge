// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// eigenMatMult
SEXP eigenMatMult(const Eigen::Map<Eigen::MatrixXd> A, Eigen::Map<Eigen::MatrixXd> B);
RcppExport SEXP _scMerge_eigenMatMult(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenMatMult(A, B));
    return rcpp_result_gen;
END_RCPP
}
// eigenSpMatMult
SEXP eigenSpMatMult(const Eigen::MappedSparseMatrix<double>& A, Eigen::MappedSparseMatrix<double>& B);
RcppExport SEXP _scMerge_eigenSpMatMult(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double>& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenSpMatMult(A, B));
    return rcpp_result_gen;
END_RCPP
}
// eigenResidop
SEXP eigenResidop(const Eigen::Map<Eigen::MatrixXd> A, Eigen::Map<Eigen::MatrixXd> B);
RcppExport SEXP _scMerge_eigenResidop(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenResidop(A, B));
    return rcpp_result_gen;
END_RCPP
}
// eigenSpResidop
SEXP eigenSpResidop(const Eigen::MappedSparseMatrix<double>& A, Eigen::MappedSparseMatrix<double>& B);
RcppExport SEXP _scMerge_eigenSpResidop(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double>& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenSpResidop(A, B));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests();

static const R_CallMethodDef CallEntries[] = {
    {"_scMerge_eigenMatMult", (DL_FUNC) &_scMerge_eigenMatMult, 2},
    {"_scMerge_eigenSpMatMult", (DL_FUNC) &_scMerge_eigenSpMatMult, 2},
    {"_scMerge_eigenResidop", (DL_FUNC) &_scMerge_eigenResidop, 2},
    {"_scMerge_eigenSpResidop", (DL_FUNC) &_scMerge_eigenSpResidop, 2},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_scMerge(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
