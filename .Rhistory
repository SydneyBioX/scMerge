mnc_res <- findMNC(exprs_mat = exprs_mat[HVG, ], clustering_list = cluster_res$clustering_list, dist = dist, parallelParam = parallelParam)
print(mnc_res)
# Create replicate matrix
repVector <- mncReplicate(clustering_list = cluster_res$clustering_list,
clustering_distProp = cluster_res$clustering_distProp, replicate_prop = replicate_prop,
mnc_df = mnc_res)
if (!is.null(cell_type) & !is.null(cell_type_inc)) {
cat("Performing semi-supervised scMerge with subsets of known cell type\n")
repVector[cell_type_inc] <- cell_type[cell_type_inc]
}
if (!is.null(WV)) {
cat("Performing semi-supervised scMerge with wanted variation\n")
repVector <- wvReplicate(exprs_mat, WV, WV_marker, repVector)
}
}
repVector
exprs_mat
cellNames = colnames(exprs_mat)
cellNames
repVector
roxygen2::roxygenise()
rm(list=ls())
context("Testing identical results when permuting columns")
library(SingleCellExperiment)
library(scater)
library(scMerge)
## Loading example data
data('example_sce', package = 'scMerge')
## Previously computed stably expressed genes
data('segList_ensemblGeneID', package = 'scMerge')
## Running an example data with minimal inputs
######################################
# example_sce1 = example_sce
res1 = scMerge(sce_combine = example_sce1,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(3, 3),
assay_name = 'scMerge1',
replicate_prop = 1,
# cell_type = example_sce1$cellTypes,
return_all_RUV = TRUE
)
example_sce1 = example_sce
res1 = scMerge(sce_combine = example_sce1,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(3, 3),
assay_name = 'scMerge1',
replicate_prop = 1,
# cell_type = example_sce1$cellTypes,
return_all_RUV = TRUE
)
# ruvK = 20; cell_type = NULL; cell_type_match = FALSE; cell_type_inc = NULL;
# fast_svd = FALSE; rsvd_prop = 0.1; dist = "cor"; WV = NULL;
# WV_marker = NULL; parallel = FALSE;
# parallelParam = NULL; return_all_RUV = FALSE;
#
#
#
# assay(res1, "scMerge1")[1:5,1:5]
# assay(res2, "scMerge2")[1:5,1:5]
######################################
set.seed(2)
example_sce2 = example_sce[,sample(seq_len(ncol(example_sce)))]
res2 = scMerge(sce_combine = example_sce2,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(3, 3),
assay_name = 'scMerge2', replicate_prop = 1,
return_all_RUV = TRUE
)
######################################
scater::plotPCA(res1, colour_by = 'cellTypes', shape = 'batch',
run_args = list(exprs_values = 'scMerge1'), add_ticks = FALSE)
scater::plotPCA(res2, colour_by = 'cellTypes', shape = 'batch',
run_args = list(exprs_values = 'scMerge2'), add_ticks = FALSE)
repMat1 = metadata(res1)$scRep_res
repMat2 = metadata(res2)$scRep_res
all.equal(repMat1, repMat2)
colSums(repMat1)
colSums(repMat2)
context("Testing identical results when permuting columns")
library(SingleCellExperiment)
library(scater)
library(scMerge)
## Loading example data
data('example_sce', package = 'scMerge')
## Previously computed stably expressed genes
data('segList_ensemblGeneID', package = 'scMerge')
## Running an example data with minimal inputs
######################################
example_sce1 = example_sce
res1 = scMerge(sce_combine = example_sce1,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(3, 3),
assay_name = 'scMerge1',
replicate_prop = 1,
# cell_type = example_sce1$cellTypes,
return_all_RUV = TRUE
)
# sce_combine = example_sce1
# assay_name = 'scMerge1'
# sce = example_sce1
# batch = example_sce1$batch
#
# ctl = segList_ensemblGeneID$mouse$mouse_scSEG
# kmeansK = c(3, 3)
# replicate_prop = 1
# return_all_RUV = TRUE
# exprs = "logcounts"; hvg_exprs = "counts";
# marker = NULL; marker_list = NULL;
# ruvK = 20; cell_type = NULL; cell_type_match = FALSE; cell_type_inc = NULL;
# fast_svd = FALSE; rsvd_prop = 0.1; dist = "cor"; WV = NULL;
# WV_marker = NULL; parallel = FALSE;
# parallelParam = NULL; return_all_RUV = FALSE;
#
#
#
# assay(res1, "scMerge1")[1:5,1:5]
# assay(res2, "scMerge2")[1:5,1:5]
######################################
set.seed(2)
example_sce2 = example_sce[,sample(seq_len(ncol(example_sce)))]
# sce_combine = example_sce2
# assay_name = 'scMerge2'
# sce = example_sce2
# batch = example_sce2$batch
res2 = scMerge(sce_combine = example_sce2,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(3, 3),
assay_name = 'scMerge2', replicate_prop = 1,
return_all_RUV = TRUE
)
######################################
scater::plotPCA(res1, colour_by = 'cellTypes', shape = 'batch',
run_args = list(exprs_values = 'scMerge1'), add_ticks = FALSE)
scater::plotPCA(res2, colour_by = 'cellTypes', shape = 'batch',
run_args = list(exprs_values = 'scMerge2'), add_ticks = FALSE)
repMat1 = metadata(res1)$scRep_res
repMat2 = metadata(res2)$scRep_res
expect_true(identical(repMat1[, 1], repMat2[, 1]) |
identical(repMat1[, 1], repMat2[, 2]) |
identical(repMat1[, 1], repMat2[, 3]))
expect_true(identical(repMat1[, 2], repMat2[, 1]) |
identical(repMat1[, 2], repMat2[, 2]) |
identical(repMat1[, 2], repMat2[, 3]))
expect_true(identical(repMat1[, 3], repMat2[, 1]) |
identical(repMat1[, 3], repMat2[, 2]) |
identical(repMat1[, 3], repMat2[, 3]))
repMat1[, 1]
repMat1
repMat1[,1]
repMat1 = metadata(res1)$scRep_res
repMat2 = metadata(res2)$scRep_res
repMat1
repMat2
sample(seq_len(ncol(example_sce)))
context("Testing identical results when permuting columns")
library(SingleCellExperiment)
library(scater)
library(scMerge)
## Loading example data
data('example_sce', package = 'scMerge')
## Previously computed stably expressed genes
data('segList_ensemblGeneID', package = 'scMerge')
## Running an example data with minimal inputs
######################################
example_sce1 = example_sce
res1 = scMerge(sce_combine = example_sce1,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(3, 3),
assay_name = 'scMerge1',
replicate_prop = 1,
# cell_type = example_sce1$cellTypes,
return_all_RUV = TRUE
)
# sce_combine = example_sce1
# assay_name = 'scMerge1'
# sce = example_sce1
# batch = example_sce1$batch
#
# ctl = segList_ensemblGeneID$mouse$mouse_scSEG
# kmeansK = c(3, 3)
# replicate_prop = 1
# return_all_RUV = TRUE
# exprs = "logcounts"; hvg_exprs = "counts";
# marker = NULL; marker_list = NULL;
# ruvK = 20; cell_type = NULL; cell_type_match = FALSE; cell_type_inc = NULL;
# fast_svd = FALSE; rsvd_prop = 0.1; dist = "cor"; WV = NULL;
# WV_marker = NULL; parallel = FALSE;
# parallelParam = NULL; return_all_RUV = FALSE;
#
#
#
# assay(res1, "scMerge1")[1:5,1:5]
# assay(res2, "scMerge2")[1:5,1:5]
######################################
set.seed(2)
index = sample(seq_len(ncol(example_sce)))
example_sce2 = example_sce[,index]
set.seed(2)
index = sample(seq_len(ncol(example_sce)))
example_sce2 = example_sce[,index]
res2 = scMerge(sce_combine = example_sce2,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(3, 3),
assay_name = 'scMerge2',
replicate_prop = 1,
return_all_RUV = TRUE
)
repMat1 = metadata(res1)$scRep_res
repMat2 = metadata(res2)$scRep_res
repMat1 = metadata(res1)$scRep_res
repMat2 = metadata(res2)$scRep_res[order(index), ]
repMat1 %>% head()
repMat2 %>% head()
expect_true(identical(repMat1[, 3], repMat2[, 1]) |
identical(repMat1[, 3], repMat2[, 2]) |
identical(repMat1[, 3], repMat2[, 3]))
repMat1 = unname(metadata(res1)$scRep_res)
repMat2 = unname(metadata(res2)$scRep_res[order(index), ])
expect_true(identical(repMat1[, 3], repMat2[, 1]) |
identical(repMat1[, 3], repMat2[, 2]) |
identical(repMat1[, 3], repMat2[, 3]))
repMat1 = unname(metadata(res1)$scRep_res)
repMat2 = unname(metadata(res2)$scRep_res[order(index), ])
expect_true(identical(repMat1[, 1], repMat2[, 1]) |
identical(repMat1[, 1], repMat2[, 2]) |
identical(repMat1[, 1], repMat2[, 3]))
expect_true(identical(repMat1[, 2], repMat2[, 1]) |
identical(repMat1[, 2], repMat2[, 2]) |
identical(repMat1[, 3], repMat2[, 3]))
expect_true(identical(repMat1[, 3], repMat2[, 1]) |
identical(repMat1[, 3], repMat2[, 2]) |
identical(repMat1[, 3], repMat2[, 3]))
expect_true(identical(repMat1[, 2], repMat2[, 1]) |
identical(repMat1[, 2], repMat2[, 2]) |
identical(repMat1[, 2], repMat2[, 3]))
expect_true(identical(repMat1[, 3], repMat2[, 1]) |
identical(repMat1[, 3], repMat2[, 2]) |
identical(repMat1[, 3], repMat2[, 3]))
colnames(sce_combine)
library(SingleCellExperiment)
library(scater)
## Loading example data
data('example_sce', package = 'scMerge')
sce_combine=  example_sce1
sce_combine=  example_sce
## Checking if the cell names are non-unique
colnames(sce_combine)
## Checking if the cell names are non-unique
cellNames = colnames(sce_combine)
rm(list=ls())
roxygenise()
library(pkgdown)
context("Testing identical results when permuting columns")
library(SingleCellExperiment)
library(scater)
library(scMerge)
## Loading example data
data('example_sce', package = 'scMerge')
## Previously computed stably expressed genes
data('segList_ensemblGeneID', package = 'scMerge')
## Running an example data with minimal inputs
######################################
example_sce1 = example_sce
res1 = scMerge(sce_combine = example_sce1,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(3, 3),
assay_name = 'scMerge1',
replicate_prop = 1,
return_all_RUV = TRUE
)
######################################
set.seed(2)
index = sample(seq_len(ncol(example_sce)))
example_sce2 = example_sce[,index]
res2 = scMerge(sce_combine = example_sce2,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(3, 3),
assay_name = 'scMerge2',
replicate_prop = 1,
return_all_RUV = TRUE
)
######################################
# scater::plotPCA(res1, colour_by = 'cellTypes', shape = 'batch',
#                 run_args = list(exprs_values = 'scMerge1'), add_ticks = FALSE)
#
# scater::plotPCA(res2, colour_by = 'cellTypes', shape = 'batch',
#                 run_args = list(exprs_values = 'scMerge2'), add_ticks = FALSE)
assay(res1, "scMerge1")
expect_identical(assay(res1, "scMerge1"), assay(res2, "scMerge2"))
assay(res2, "scMerge2")[1:5,1:5]
assay(res1, "scMerge1")[1:5,1:5]
expect_identical(assay(res1, "scMerge1"), assay(res2, "scMerge2")[order(index), ])
expect_identical(assay(res1, "scMerge1"),
assay(res2, "scMerge2")[,order(index)])
expect_equal(assay(res1, "scMerge1"),
assay(res2, "scMerge2")[,order(index)])
repMat1 = unname(metadata(res1)$scRep_res)
library(formatR)
formatR::tidy_eval("R")
formatR::tidy_dir("R")
formatR::tidy_dir("tests")
formatR::tidy_dir("tests/testthat/")
formatR::tidy_dir("tests/testthat/", width.cutoff = 20)
formatR::tidy_dir("tests/testthat/", width.cutoff = 79)
formatR::tidy_dir("tests/testthat/", width.cutoff = 80)
formatR::tidy_dir("tests/testthat/", width.cutoff = 75)
formatR::tidy_dir("R", width.cutoff = 75)
roxygenise()
BiocCheck::BiocCheck()
formatR::tidy_dir("R", width.cutoff = 75, indent = 4)
formatR::tidy_dir("tests/testthat/", width.cutoff = 75, indent = 4)
BiocCheck::BiocCheck()
sce_combine = example_sce
exprs = "exprs"
exprs = "logcounts"
## Extracting data matrix from SCE object
exprs_mat <- SummarizedExperiment::assay(sce_combine, exprs)
if (is.matrix(exprs_mat)) {
stop(paste0("The assay named '", exprs, "' must be of class 'matrix', please convert this."))
}
exprs_mat
exprs_mat %>% class
is.matrix(exprs_mat)
## Extracting data matrix from SCE object
exprs_mat <- SummarizedExperiment::assay(sce_combine, exprs)
if (!is.matrix(exprs_mat)) {
stop(paste0("The assay named '", exprs, "' must be of class 'matrix', please convert this."))
}
sce_rownames <- rownames(sce_combine)
rowSums(exprs_mat)
rowSums(exprs_mat) == 0
any(rowSums(exprs_mat) == 0)
any(colSums(exprs_mat) == 0)
class(example_sce)
class(example_sce)
class(example_sce) == "SingleCellExperiment"
?stopifnot
roxygenise()
scMerge(matrix(c(0,1,1,1)))
expect_error(scMerge(matrix(c(0,1,1,1))))
context("Inputs of scMerge")
## Input must be an SingleCellExperiment object
expect_error(scMerge(matrix(c(0,1,1,1))))
data("example_sce", package = "scMerge")
context("Inputs of scMerge")
## Input must be an SingleCellExperiment object
expect_error(scMerge(matrix(c(0,1,1,1))))
data("example_sce", package = "scMerge")
example_sce_colnames = example_sce
colnames(example_sce_colnames) = rep(1, ncol(example_sce_colnames))
data("example_sce", package = "scMerge")
example_sce_colnames = example_sce
colnames(example_sce_colnames) = rep(1, ncol(example_sce_colnames))
expect_error(
sce_combine = example_sce_colnames
)
data("example_sce", package = "scMerge")
example_sce_colnames = example_sce
colnames(example_sce_colnames) = rep(1, ncol(example_sce_colnames))
expect_error(
scMerge(
sce_combine = example_sce_colnames
)
)
scMerge(
sce_combine = example_sce_colnames
)
roxygenise()
expect_error(
scMerge(
sce_combine = example_sce,
exprs = NULL
)
)
scMerge(
sce_combine = example_sce,
exprs = 1
)
expect_error(
scMerge(
sce_combine = example_sce,
exprs = NULL
)
)
scMerge(
sce_combine = example_sce,
exprs = NULL
)
expect_error(
scMerge(
sce_combine = example_sce,
hvg_exprs = NULL
)
)
scMerge(
sce_combine = example_sce,
hvg_exprs = NULL
)
scMerge(
sce_combine = example_sce,
hvg_exprs = NULL
)
scMerge(
sce_combine = example_sce,
exprs = NULL
)
scMerge(
sce_combine = example_sce,
assay_name = "scMerge"
)
## Input sce must have a value for "assay_name" argument
expect_error(
scMerge(
sce_combine = example_sce
)
)
scMerge(
sce_combine = example_sce
)
scMerge(
sce_combine = example_sce
)
scMerge(
sce_combine = example_sce,
assay_name = "scmerge"
)
scMerge(
sce_combine = example_sce
)
scMerge(
sce_combine = example_sce,
assay_name = "scmerge"
)
scMerge(
sce_combine = example_sce,
assay_name = "scmerge",
ctl = NULL
)
scMerge(
sce_combine = example_sce,
assay_name = "scmerge"
)
scMerge(
sce_combine = example_sce,
assay_name = "scmerge",
ctl = c("apple", "banana")
)
roxygenise()
context("Inputs of scMerge")
## Input must be an SingleCellExperiment object
expect_error(
scMerge(
sce_combine = matrix(c(0,1,1,1))
)
)
## Input sce must have unique cell names
data("example_sce", package = "scMerge")
example_sce_colnames = example_sce
colnames(example_sce_colnames) = rep("Cell", ncol(example_sce_colnames))
expect_error(
scMerge(
sce_combine = example_sce_colnames
)
)
## Must have a value for "exprs" argument, the default is "logcounts"
expect_error(
scMerge(
sce_combine = example_sce,
exprs = NULL
)
)
## Must have a value for "assay_name" argument
expect_error(
scMerge(
sce_combine = example_sce
)
)
## Must have valid ctl values.
expect_error(
scMerge(
sce_combine = example_sce,
assay_name = "scmerge"
)
)
expect_error(
scMerge(
sce_combine = example_sce,
assay_name = "scmerge",
ctl = c("apple", "banana")
)
)
scMerge(
sce_combine = example_sce,
assay_name = "scmerge",
ctl = c("apple", "banana")
)
roxygenise()
library(testthat)
context("Inputs of scMerge")
roxygenise()
library(pkgdown)
build_site()
roxygenise()
build_site()
library(devtools)
install_github("LTLA/BiocSingular")
?BiocSingular
??BiocSingular
library(BiocSingular)
a <- matrix(rnorm(100000), ncol=20)
out <- runIrlbaSVD(a)
str(out)
