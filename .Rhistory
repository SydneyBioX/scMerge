if (length(ctl) == 0) {
stop("Could not find any negative control genes in the row names of the expression matrix",
call. = FALSE)
}
}
## Checking the batch info
if (is.null(sce_combine$batch)) {
stop("Could not find a 'batch' column in colData(sce_combine)", call. = FALSE)
}
if (class(sce_combine$batch) == "factor") {
batch <- droplevels(sce_combine$batch)
} else {
batch <- sce_combine$batch
}
## If the user supplied a parallelParam class, then regardless of parallel =
## TRUE or FALSE, we will use that class Hence no if statement for this case.
if (!is.null(parallelParam)) {
message("Computation will run in parallel using supplied parameters")
}
## If parallel is TRUE, but user did not supplied a parallelParam class, then
## we set it to bpparam()
if (parallel & is.null(parallelParam)) {
message("Computation will run in parallel using BiocParallel::bpparam()")
parallelParam = BiocParallel::bpparam()
}
## If parallel is FALSE, or the user did not supplied a parallelParam class,
## we will use SerialParam()
if (!parallel | is.null(parallelParam)) {
message("Computation will run in serial")
parallelParam = BiocParallel::SerialParam()
}
repMat <- scReplicate(sce_combine = sce_combine, batch = batch, kmeansK = kmeansK,
exprs = exprs, hvg_exprs = hvg_exprs, marker = marker, marker_list = marker_list,
replicate_prop = replicate_prop, cell_type = cell_type, cell_type_match = cell_type_match,
cell_type_inc = cell_type_inc, dist = dist, WV = WV, WV_marker = WV_marker,
parallelParam = parallelParam, fast_svd = fast_svd)
exprs_mat <- SummarizedExperiment::assay(sce_combine, exprs)
cellNames = colnames(exprs_mat)
batch_list <- as.list(as.character(unique(batch)))
batch_oneType <- unlist(batch_list)[which(kmeansK == 1)]
batch_num <- table(batch)[as.character(unique(batch))]
# if(ncol(exprs_mat)>=5000){ rpca_q = 0 }else if(ncol(exprs_mat)>=2000){
# rpca_q =1 }else{ rpca_q =2 }
#############################
# if (parallel) {
pca <- BiocParallel::bplapply(batch_list, function(this_batch_list) {
computePCA_byHVGMarker(this_batch_list = this_batch_list, batch = batch,
batch_oneType = batch_oneType, marker = marker, exprs_mat = exprs_mat,
HVG_list = HVG_list, fast_svd = fast_svd)
}, BPPARAM = parallelParam)
if (is.null(marker) & is.null(marker_list)) {
cat("No maker nor marker_list information was supplied \n")
cat("Finding HVG...\n")
exprs_mat_HVG <- SummarizedExperiment::assay(sce_combine, hvg_exprs)
HVG_res <- findHVG(exprs_mat_HVG, batch, parallelParam = parallelParam)
HVG <- HVG_res$HVG
HVG_list <- HVG_res$HVG_list
} else if (!is.null(marker_list) & is.null(marker)) {
## Taking the union of marker_list as HVG
cat("Only marker_list information was supplied \n")
HVG_list <- marker_list
names(HVG_list) <- batch_list
HVG <- Reduce(union, marker_list)
} else {
## If there is only a list of markers, then use that as HVG
HVG <- marker
}
HVG_list
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("M3Drop", version = "3.8")
?install_github
args("install_github")
args("devools::install_github")
library(devtools)
args("install_github")
install.packages("/Users/kevinwang/Downloads/M3Drop_1.9.4.tgz", repos = NULL)
M3Drop::BrenneckeGetVariableGenes
remove.packages("M3Drop")
install.packages("/Users/kevinwang/Downloads/M3Drop_1.9.4.tgz", repos = NULL)
library(M3Drop)
M3Drop::BrenneckeGetVariableGenes()
M3Drop::BrenneckeGetVariableGenes
packageVersion("snow")
packageVersion("M3Drop")
class(packageVersion("M3Drop"))
packageVersion("M3Drop") < "1.2"
packageVersion("M3Drop") < "1.9.3"
packageVersion("M3Drop") < "1.9.4"
packageVersion("M3Drop") < "1.9."
packageVersion("M3Drop") < "1.9."
packageVersion("M3Drop") < "1.9.5"
library(roxygen2)
library(devtools)
load_all
load_all()
library(scMerge)
?scMerge
library(SingleCellExperiment)
library(scater)
## Loading example data
data("example_sce", package = "scMerge")
## Previously computed stably expressed genes
data("segList_ensemblGeneID", package = "scMerge")
## Running an example data with minimal inputs
sce_mESC <- scMerge(
sce_combine = example_sce,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(3, 3),
assay_name = 'scMerge')
scater::plotPCA(sce_mESC, colour_by = 'cellTypes', shape = 'batch',
run_args = list(exprs_values = 'logcounts'))
scater::plotPCA(sce_mESC, colour_by = 'cellTypes', shape = 'batch',
run_args = list(exprs_values = 'scMerge'))
package_version("M3Drop")
package_version(M3Drop)
library("M3Drop", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:M3Drop", unload=TRUE)
roxygenise()
?BrenneckeGetVariableGenes
library(M3DExampleData)
HVG <- BrenneckeGetVariableGenes(Mmus_example_list$data)
library(BiocManager)
BiocManager::install("M3DExampleData")
library(M3DExampleData)
HVG <- BrenneckeGetVariableGenes(Mmus_example_list$data)
HVG
HVG %>% head
HVG[,"Gene"]
HVG %>% rownames
roxygenise()
library(SingleCellExperiment)
library(scater)
## Loading example data
data("example_sce", package = "scMerge")
## Previously computed stably expressed genes
data("segList_ensemblGeneID", package = "scMerge")
## Running an example data with minimal inputs
sce_mESC <- scMerge(
sce_combine = example_sce,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(3, 3),
assay_name = 'scMerge')
library(roxygen2)
roxygenise()
library(BiocCheck)
BiocCheck()
roxygenise()
library("scMerge", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:scMerge", unload=TRUE)
roxygenise()
library(scMerge)
BiocCheck()
library(testthat)
context("Testing speed of cpp matrix operations")
## Generate a simulated data to test on the speed of our improved matrix
## operations
L = ruvSimulate(m = 100, n = 2000, nRep = 10, lambda = 0.1)
Y = L$Y
M = L$M
t1 = Sys.time()
improved1 = unname(scMerge::eigenResidop(Y, M))
t2 = Sys.time()
old = unname(ruv::residop(Y, M))
t3 = Sys.time()
## improved1 used C++ matrix operations, hence it should be faster than
## native R matrix operations
expect_equal(improved1, old, tolerance = 1e-07)
expect_lt(as.numeric(t2 - t1, units = "secs"), as.numeric(t3 - t2, units = "secs"))
as.numeric(t2 - t1, units = "secs")
as.numeric(t3 - t2, units = "secs")
context("Testing speed of cpp matrix operations")
## Generate a simulated data to test on the speed of our improved matrix
## operations
L = ruvSimulate(m = 100, n = 2000, nRep = 10, lambda = 0.1)
Y = L$Y
M = L$M
t1 = Sys.time()
improved1 = unname(scMerge::eigenResidop(Y, M))
t2 = Sys.time()
old = unname(ruv::residop(Y, M))
t3 = Sys.time()
## improved1 used C++ matrix operations, hence it should be faster than
## native R matrix operations
expect_equal(improved1, old, tolerance = 1e-07)
expect_lt(as.numeric(t2 - t1, units = "secs"), as.numeric(t3 - t2, units = "secs"))
load_all()
devtools::load_all()
roxygenise()
paste("Normally, scMerge takes ", round(t2 - t1, 2), " seconds")
paste("Fast version of scMerge takes ", round(t4 - t3, 2), " seconds")
t1 = Sys.time()
scMerge_classical <- scMerge(example_sce,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(3, 3),
assay_name = "scMerge_classical")
t2 = Sys.time()
# Chunk 1: style
BiocStyle::markdown()
# Chunk 2: loading packages
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scMerge)
library(scater)
})
# Chunk 4: loading data
## Subsetted mouse ESC data
data("example_sce", package = "scMerge")
## single-cell stably expressed gene list
data("segList_ensemblGeneID", package = "scMerge")
t3 = Sys.time()
scMerge_fast <- scMerge(example_sce,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(3, 3),
assay_name = "scMerge_fast",
fast_svd = TRUE,
rsvd_prop = 0.1)
t4 = Sys.time()
t1 = Sys.time()
scMerge_classical <- scMerge(example_sce,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(3, 3),
assay_name = "scMerge_classical")
t2 = Sys.time()
paste("Normally, scMerge takes ", round(t2 - t1, 2), " seconds")
paste("Fast version of scMerge takes ", round(t4 - t3, 2), " seconds")
scater::plotPCA(scMerge_fast,
colour_by = "cellTypes",
shape_by = "batch",
run_args = list(exprs_values = "scMerge_fast")) +
labs(title = "fast_svd yields similar results to the default version")
paste("Normally, scMerge takes ", round(t2 - t1, 2), " seconds")
paste("Fast version of scMerge takes ", round(t4 - t3, 2), " seconds")
paste("Normally, scMerge takes ", round(t2 - t1, 2), " seconds")
paste("Fast version of scMerge takes ", round(t4 - t3, 2), " seconds")
scater::plotPCA(scMerge_fast,
colour_by = "cellTypes",
shape_by = "batch",
run_args = list(exprs_values = "scMerge_fast")) +
labs(title = "fast_svd yields similar results to the default version")
library(devtools)
load_all()
library(roxygen2)
# Chunk 1: style
BiocStyle::markdown()
# Chunk 2: loading packages
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scMerge)
library(scater)
})
# Chunk 4: loading data
## Subsetted mouse ESC data
data("example_sce", package = "scMerge")
## single-cell stably expressed gene list
data("segList_ensemblGeneID", package = "scMerge")
# Chunk 5: checking raw data
scater::plotPCA(example_sce,
colour_by = "cellTypes",
shape_by = "batch")
t1 = Sys.time()
scMerge_classical <- scMerge(example_sce,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(3, 3),
assay_name = "scMerge_classical")
t2 = Sys.time()
t3 = Sys.time()
scMerge_fast <- scMerge(example_sce,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(3, 3),
assay_name = "scMerge_fast",
fast_svd = TRUE,
rsvd_prop = 0.1)
t4 = Sys.time()
paste("Normally, scMerge takes ", round(t2 - t1, 2), " seconds")
paste("Fast version of scMerge takes ", round(t4 - t3, 2), " seconds")
scater::plotPCA(scMerge_fast,
colour_by = "cellTypes",
shape_by = "batch",
run_args = list(exprs_values = "scMerge_fast")) +
labs(title = "fast_svd yields similar results to the default version")
A = matrix(0, ncol = 500, nrow = 500)
system.time(A %*% A)
system.time(eigenMatMult(A, A))
library(roxygen2)
roxygenise()
library(devtools)
load_all()
Rcpp::compileAttributes()
A = matrix(0, ncol = 500, nrow = 500)
system.time(A %*% A)
system.time(eigenMatMult(A, A))
system.time(eigenMatMult(A, A))
system.time(eigenMatMult(A, A))
system.time(eigenMatMult(A, A))
system.time(eigenMatMult(A, A))
remove.packages("scMerge")
.libPaths()
install.packages("/Users/kevinwang/Downloads/scater_1.11.10.tgz", repos = NULL)
library(scMerge)
detach("package:scMerge", unload=TRUE)
remove.packages("scMerge")
library(scMerge)
roxygenise()
library(roxygen2)
roxygenise()
A = matrix(0, ncol = 500, nrow = 500)
system.time(A %*% A)
system.time(eigenMatMult(A, A))
## Loading example data
set.seed(1)
data('example_sce', package = 'scMerge')
scRep_result = scReplicate(
sce_combine = example_sce,
batch = example_sce$batch,
kmeansK = c(3,3),
fast_svd = FALSE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("M3Drop", version = "3.8")
library("scater", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scMerge)
library(scater)
})
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BiocNeighbors", version = "3.8")
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scMerge)
library(scater)
})
## Subsetted mouse ESC data
data("example_sce", package = "scMerge")
## single-cell stably expressed gene list
data("segList_ensemblGeneID", package = "scMerge")
scater::plotPCA(example_sce,
colour_by = "cellTypes",
shape_by = "batch")
detach("package:scater", unload=TRUE)
remove.packages("scater")
install("scater")
devtools::install("scater")
BiocManager::install("scater")
# Chunk 1: style
BiocStyle::markdown()
# Chunk 2: loading packages
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scMerge)
library(scater)
})
# Chunk 4: loading data
## Subsetted mouse ESC data
data("example_sce", package = "scMerge")
## single-cell stably expressed gene list
data("segList_ensemblGeneID", package = "scMerge")
scater::plotPCA(example_sce,
colour_by = "cellTypes",
shape_by = "batch")
scMerge_unsupervised <- scMerge(sce_combine = example_sce,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(3, 3),
assay_name = "scMerge_unsupervised")
BiocManager::install("M3Drop", version = "3.8")
roxygenise()
BiocCheck()
BiocCheck::BiocCheck()
devtools::run_examples()
library("M3Drop", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
devtools::run_examples()
roxygenise()
devtools::run_examples()
context("Testing speed of cpp matrix operations")
## Generate a simulated data to test on the speed of our improved matrix
## operations
L = ruvSimulate(m = 100, n = 2000, nRep = 10, lambda = 0.1)
Y = L$Y
M = L$M
t1 = Sys.time()
improved1 = unname(scMerge::eigenResidop(Y, M))
t2 = Sys.time()
old = unname(ruv::residop(Y, M))
t3 = Sys.time()
## improved1 used C++ matrix operations, hence it should be faster than
## native R matrix operations
expect_equal(improved1, old, tolerance = 1e-07)
expect_lt(as.numeric(t2 - t1, units = "secs"), as.numeric(t3 - t2, units = "secs"))
as.numeric(t2 - t1, units = "secs")
as.numeric(t3 - t2, units = "secs")
roxygen2::roxygenise()
remove.packages("M3Drop")
install.packages("/Users/kevinwang/Downloads/M3Drop_1.9.4.tgz", repos = NULL)
remove.packages("M3Drop")
install.packages("/Users/kevinwang/Downloads/M3Drop_1.9.4.tgz", repos = NULL)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(devtools)
devtools::run_examples()
library(scMerge)
A = matrix(0, ncol = 500, nrow = 500)
system.time(A %*% A)
system.time(eigenMatMult(A, A))
A = matrix(0, ncol = 500, nrow = 500)
system.time(A %*% A)
system.time(eigenMatMult(A, A))
library(roxygen2)
roxygenise()
BiocCheck::BiocCheck()
install_github("davismcc/scater", ref = "43407018dd68c4ae0842607cfc7d2b33305c51f1")
library(roxygen2)
roxygenise()
# Chunk 1: style
BiocStyle::markdown()
# Chunk 2: loading packages
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scMerge)
library(scater)
})
# Chunk 4: loading data
## Subsetted mouse ESC data
data("example_sce", package = "scMerge")
## single-cell stably expressed gene list
data("segList_ensemblGeneID", package = "scMerge")
# Chunk 5: checking raw data
scater::plotPCA(example_sce,
colour_by = "cellTypes",
shape_by = "batch")
install_github("davismcc/scater", ref = "826c951ed2e4275a8dc8e5426d9fd7c6c9c282b8")
devtools::install_github("davismcc/scater", ref = "826c951ed2e4275a8dc8e5426d9fd7c6c9c282b8")
detach("package:scater", unload=TRUE)
library(roxygen2)
roxygenise()
# Chunk 1: style
BiocStyle::markdown()
# Chunk 2: loading packages
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scMerge)
library(scater)
})
# Chunk 4: loading data
## Subsetted mouse ESC data
data("example_sce", package = "scMerge")
## single-cell stably expressed gene list
data("segList_ensemblGeneID", package = "scMerge")
# Chunk 5: checking raw data
scater::plotPCA(example_sce,
colour_by = "cellTypes",
shape_by = "batch")
library(pkgdown)
pkgdown::build_site()
# Chunk 1: style
BiocStyle::markdown()
# Chunk 2: loading packages
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scMerge)
library(scater)
})
# Chunk 4: loading data
## Subsetted mouse ESC data
data("example_sce", package = "scMerge")
## single-cell stably expressed gene list
data("segList_ensemblGeneID", package = "scMerge")
# Chunk 5: checking raw data
scater::plotPCA(example_sce,
colour_by = "cellTypes",
shape_by = "batch")
library(scMerge)
# Chunk 1: style
BiocStyle::markdown()
# Chunk 2: loading packages
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scMerge)
library(scater)
})
# Chunk 4: loading data
## Subsetted mouse ESC data
data("example_sce", package = "scMerge")
## single-cell stably expressed gene list
data("segList_ensemblGeneID", package = "scMerge")
# Chunk 5: checking raw data
scater::plotPCA(example_sce,
colour_by = "cellTypes",
shape_by = "batch")
t1 = Sys.time()
scMerge_classical <- scMerge(example_sce,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(3, 3),
assay_name = "scMerge_classical")
t2 = Sys.time()
t3 = Sys.time()
scMerge_fast <- scMerge(example_sce,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(3, 3),
assay_name = "scMerge_fast",
fast_svd = TRUE,
rsvd_prop = 0.1)
t4 = Sys.time()
paste("Normally, scMerge takes ", round(t2 - t1, 2), " seconds")
paste("Fast version of scMerge takes ", round(t4 - t3, 2), " seconds")
scater::plotPCA(scMerge_fast,
colour_by = "cellTypes",
shape_by = "batch",
run_args = list(exprs_values = "scMerge_fast")) +
labs(title = "fast_svd yields similar results to the default version")
pkgdown::build_site()
