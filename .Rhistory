exprsMat = assay(sce_mESC, "counts")[1:1000, ]
scSEGIndex(exprsMat = exprsMat)
## Loading example data
data("sce_mESC", package = "scMerge.data")
exprsMat = assay(sce_mESC, "counts")[1:100, ]
scSEGIndex(exprsMat = exprsMat)
exprsMat = assay(sce_mESC, "counts")[1:500, ]
scSEGIndex(exprsMat = exprsMat)
## Loading example data
data("sce_mESC", package = "scMerge.data")
exprsMat = assay(sce_mESC, "counts")[1:200, ]
scSEGIndex(exprsMat = exprsMat)
result = scSEGIndex(exprsMat = exprsMat)
str(result)
roxygenise
roxygenise()
?scSEGIndex
L = scMerge::ruvSimulate(m = 200, n = 1000, nc = 50, nRep = 10)
Y = L$Y; M = L$M; ctl = L$ctl; batch = L$dataSource;
res = scRUVIII(Y = Y, M = M, ctl = ctl, k = c(10, 20), batch = batch)
res
res %>% names()
res = scRUVIII(Y = Y, M = M, ctl = ctl, k = 10, batch = batch)
str(res)
res %>% names
roxygenise()
?scRUVIII
roxygenise()
?scRUVIII
roxygenise()
?scRUVIII
## Loading example data
set.seed(1)
data("sce_mESC", package = "scMerge.data")
scRep_result <- scReplicate(
sce = sce_mESC,
batch = sce_mESC$batch,
kmeansK = c(1,3,3,1,1),
fast_svd = FALSE)
scRep_result
scRep_result %>% st
scRep_result %>% str
scRep_result %>% class()
scRep_result %>% summary()
L = scMerge::ruvSimulate(m = 800, n = 1000, nc = 50, nRep = 10)
Y = L$Y; M = L$M; ctl = L$ctl
ruvgRes = scRUVg(Y = Y, ctl = ctl, k = 20)
ruvgRes %>% names
ruvgRes$alpha
roxygenise()
?scRUVg
roxygenise()
?scMerge
roxygenise()
L = ruvSimulate(m = 100, n = 2000, nRep = 10, lambda = 0.1)
names(L)
L$ctl
names(L)
roxygenise()
L = ruvSimulate(m = 100, n = 2000, nRep = 10, lambda = 0.1)
L = ruvSimulate(m = 100, n = 2000, nRep = 10, lambda = 0.1)
names(L)
L = ruvSimulate(m = 100, n = 2000, nRep = 10, lambda = 0.1, sce = TRUE)
print(L)
roxygenise*()
roxygenise()
roxygenise()
Rcpp::compileAttributes()
A = matrix(0, ncol = 1000, nrow = 1000)
system.time(A %*% A)
system.time(eigenMatMult(A, A))
Rcpp::compileAttributes()
A = matrix(0, ncol = 100, nrow = 100)
system.time(A %*% A)
system.time(eigenMatMult(A, A))
Rcpp::compileAttributes()
A = matrix(0, ncol = 200, nrow = 200)
system.time(A %*% A)
system.time(eigenMatMult(A, A))
Rcpp::compileAttributes()
A = matrix(0, ncol = 500, nrow = 500)
system.time(A %*% A)
system.time(eigenMatMult(A, A))
Rcpp::compileAttributes()
A = matrix(0, ncol = 500, nrow = 500)
system.time(A %*% A)
system.time(eigenMatMult(A, A))
Y = M = diag(1, 200)
system.time(scMerge::eigenResidop(Y, M))
system.time(ruv::residop(Y, M))
system.time(eigenMatMult(A, A))
Rcpp::compileAttributes()
Y = M = diag(1, 500)
system.time(scMerge::eigenResidop(Y, M))
system.time(ruv::residop(Y, M))
?eigenResidop
Rcpp::compileAttributes()
roxygenise()
?eigenMatMult
roxygenise()
?eigenMatMult
roxygenise()
?fastRUVIII
data(segList)
segList$human$human_scSEG
roxygenise()
?segList
?segList_ensemblGeneID
roxygenise()
roxygenise()
Rcpp::compileAttributes()
roxygenise()
?eigenResidop
roxygenise()
roxygenise()
?eigenMatMult
?eigenMatMult
roxygenise()
?eigenMatMult
roxygenise()
roxygenise()
?eigenMatMult
roxygenise()
Rcpp::compileAttributes()
roxygenise()
?eigenMatMult
Rcpp::compileAttributes()
roxygenise()
?eigenMatMult
Rcpp::compileAttributes()
roxygenise()
Rcpp::compileAttributes()
roxygenise()
?eigenMatMult
Rcpp::compileAttributes()
roxygenise()
?eigenMatMult
Rcpp::compileAttributes()
roxygenise()
?eigenResidop
residop
Rcpp::compileAttributes()
roxygenise()
?eigenResidop
roxygenise()
BiocCheck::BiocCheck()
roxygenise()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck()
roxygenise()
roxygenise()
roxygenise()
BiocCheck::BiocCheck()
roxygenise()
roxygenise()
roxygenise()
BiocCheck::BiocCheck()
roxygenise()
BiocCheck::BiocCheck()
roxygenise()
BiocCheck::BiocCheck()
library(roxygen2)
roxygenise()
# Chunk 1: style
BiocStyle::markdown()
# Chunk 2: loading packages
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scMerge)
library(scMerge.data)
library(scater)
})
## mouse ESC data
data("sce_mESC", package = "scMerge.data")
## single-cell stably expressed gene list
data("segList_ensemblGeneID")
# Chunk 1: style
BiocStyle::markdown()
# Chunk 2: loading packages
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scMerge)
library(scMerge.data)
library(scater)
})
## mouse ESC data
data("sce_mESC", package = "scMerge.data")
## single-cell stably expressed gene list
data("segList_ensemblGeneID")
set.seed(1)
sce_mESC = sce_mESC[sample(1:nrow(sce_mESC), 1000),]
table(sce_mESC$batch, sce_mESC$cellTypes)
scater::plotPCA(sce_mESC,
colour_by = "cellTypes",
shape_by = "batch",
add_ticks = FALSE)
# Chunk 1: style
BiocStyle::markdown()
# Chunk 2: loading packages
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scMerge)
library(scMerge.data)
library(scater)
})
## mouse ESC data
data("sce_mESC", package = "scMerge.data")
## single-cell stably expressed gene list
data("segList_ensemblGeneID")
set.seed(1)
sce_mESC = sce_mESC[sample(1:nrow(sce_mESC), 500),]
table(sce_mESC$batch, sce_mESC$cellTypes)
scater::plotPCA(sce_mESC,
colour_by = "cellTypes",
shape_by = "batch",
add_ticks = FALSE)
sce_mESC <- scMerge(sce_combine = sce_mESC,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(1,3,3,1,1),
assay_name = "scMerge_unsupervised")
# Chunk 1: style
BiocStyle::markdown()
# Chunk 2: loading packages
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scMerge)
library(scMerge.data)
library(scater)
})
## mouse ESC data
data("sce_mESC", package = "scMerge.data")
## single-cell stably expressed gene list
data("segList_ensemblGeneID")
set.seed(1)
sce_mESC = sce_mESC[sample(1:nrow(sce_mESC), 500),sample(1:ncol(sce_mESC), 200)]
table(sce_mESC$batch, sce_mESC$cellTypes)
scater::plotPCA(sce_mESC,
colour_by = "cellTypes",
shape_by = "batch",
add_ticks = FALSE)
sce_mESC <- scMerge(sce_combine = sce_mESC,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(1,3,3,1,1),
assay_name = "scMerge_unsupervised")
exprs(sce_mESC)
rowSums(sce_mESC)
# Chunk 1: style
BiocStyle::markdown()
# Chunk 2: loading packages
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scMerge)
library(scMerge.data)
library(scater)
})
## mouse ESC data
data("sce_mESC", package = "scMerge.data")
## single-cell stably expressed gene list
data("segList_ensemblGeneID")
set.seed(1)
sce_mESC = sce_mESC[sample(1:nrow(sce_mESC), 200),]
table(sce_mESC$batch, sce_mESC$cellTypes)
scater::plotPCA(sce_mESC,
colour_by = "cellTypes",
shape_by = "batch",
add_ticks = FALSE)
sce_mESC <- scMerge(sce_combine = sce_mESC,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(1,3,3,1,1),
assay_name = "scMerge_unsupervised")
## mouse ESC data
data("sce_mESC", package = "scMerge.data")
## single-cell stably expressed gene list
data("segList_ensemblGeneID")
set.seed(1)
sce_mESC = sce_mESC[sample(1:nrow(sce_mESC), 500),]
table(sce_mESC$batch, sce_mESC$cellTypes)
scater::plotPCA(sce_mESC,
colour_by = "cellTypes",
shape_by = "batch",
add_ticks = FALSE)
sce_mESC <- scMerge(sce_combine = sce_mESC,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(1,3,3,1,1),
assay_name = "scMerge_unsupervised")
sce_mESC <- scater::runPCA(sce_mESC,
exprs_values = "scMerge_unsupervised")
scater::plotPCA(sce_mESC,
colour_by = "cellTypes",
shape_by = "batch",
add_ticks = FALSE)
# Chunk 1: style
BiocStyle::markdown()
# Chunk 2: loading packages
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scMerge)
library(scMerge.data)
library(scater)
})
## mouse ESC data
data("sce_mESC", package = "scMerge.data")
## single-cell stably expressed gene list
data("segList_ensemblGeneID")
set.seed(1)
sce_mESC = sce_mESC[sample(1:nrow(sce_mESC), 400),]
table(sce_mESC$batch, sce_mESC$cellTypes)
scater::plotPCA(sce_mESC,
colour_by = "cellTypes",
shape_by = "batch",
add_ticks = FALSE)
sce_mESC <- scMerge(sce_combine = sce_mESC,
ctl = segList_ensemblGeneID$mouse$mouse_scSEG,
kmeansK = c(1,3,3,1,1),
assay_name = "scMerge_unsupervised")
sce_mESC <- scater::runPCA(sce_mESC,
exprs_values = "scMerge_unsupervised")
scater::plotPCA(sce_mESC,
colour_by = "cellTypes",
shape_by = "batch",
add_ticks = FALSE)
library(pkgdown)
build_site()
L = scMerge::ruvSimulate(m = 200, n = 1000, nc = 50, nRep = 10)
Y = L$Y; M = L$M; ctl = L$ctl; batch = L$dataSource;
## Transpose the data, since RUV assumes columns are genes.
Y <- t(Y)
# geneMeanMat<-matrix(rep(rowMeans(Y),ncol(Y)),ncol=ncol(Y))
# geneSdMat<-matrix(rep(apply(Y-geneMeanMat,1,sd),ncol(Y)),ncol=ncol(Y))
# normY<-(Y-geneMeanMat)/geneSdMat
if (is.null(batch)) {
warning("No batch info!")
return(NULL)
}
scale_res <- standardize(Y, batch)
normY <- scale_res$s.data
geneSdMat <- sqrt(scale_res$stand.var) %*% t(rep(1, ncol(Y)))
geneMeanMat <- scale_res$stand.mean
library(roxygen2)
roxygenise()
scale_res <- standardize(Y, batch)
normY <- scale_res$s.data
geneSdMat <- sqrt(scale_res$stand.var) %*% t(rep(1, ncol(Y)))
geneMeanMat <- scale_res$stand.mean
normY
SmokyScotch::samplewiseCor(Y, normY)
Y
plot(Y[,1], nomY[,1])
plot(Y[,1], normY[,1])
plot(Y[,2], normY[,2])
plot(Y[,1], normY[,1])
plot(Y[1,], normY[1,])
SmokyScotch::samplewiseCor(t(Y), t(normY))
tmp1 = fastRUVIII(
Y = t(normY),
ctl = ctl,
k = k[1],
M = M,
fullalpha = fullalpha,
return.info = return.info,
fast_svd = fast_svd,
rsvd_prop = rsvd_prop
)
tmp1 = fastRUVIII(
Y = t(normY),
ctl = ctl,
k = k[1],
M = M,
fullalpha = fullalpha,
return.info = return.info
)
tmp1 = fastRUVIII(
Y = t(normY),
ctl = ctl,
k = 20,
M = M,
fullalpha = fullalpha,
return.info = return.info
)
tmp1 = fastRUVIII(
Y = t(normY),
ctl = ctl,
k = 20,
M = M,
return.info = return.info
)
tmp1 = fastRUVIII(
Y = t(normY),
ctl = ctl,
k = 20,
M = M
)
tmp2 = fastRUVIII(
Y = t(Y),
ctl = ctl,
k = 20,
M = M
)
tmp1
tmp2
tmp1
SmokyScotch::samplewiseCor(Y, normY)
SmokyScotch::samplewiseCor(tmp1, tmp2)
SmokyScotch::samplewiseCor(t(tmp1), t(tmp2))
Y
normY
summary(normY)
normY
normY %>% as.vector()
as.vector(normY)
as.vector(normY) %>% sort
sort(as.vector(normY))
L = scMerge::ruvSimulate(m = 200, n = 1000, nc = 50, nRep = 10)
Y = log2(L$Y + 1L); M = L$M; ctl = L$ctl; batch = L$dataSource;
res = scRUVIII(Y = Y, M = M, ctl = ctl, k = c(10, 20), batch = batch)
res = scRUVIII(Y = Y, M = M, ctl = ctl, k = 10, batch = batch)
res = scRUVIII(Y = Y, M = M, ctl = ctl, k = c(5, 10, 15, 20), batch = batch)
library(BiocCheck)
BiocCheck()
BiocCheck()
BiocCheck()
roxygen2::roxygenise()
library(scMerge)
roxygen2::roxygenise()
library(scMerge)
MatrixStats::rowMedians
??rowMedians
library(roxygen2)
roxygenise()
?scMerge
library(SingleCellExperiment)
library(scater)
library(scMerge.data)
## Loading example data
data("sce_mESC", package = "scMerge.data")
## Previously computed stably expressed genes
data("segList_ensemblGeneID")
## Running an example data with minimal inputs
stop("assay_name is NULL, please provide a name to store the results under")
library(SingleCellExperiment)
library(scater)
library(scMerge.data)
## Loading example data
data("sce_mESC", package = "scMerge.data")
## Previously computed stably expressed genes
data("segList_ensemblGeneID")
## Running an example data with minimal inputs
assayData()
assayData(sce_mESC)
stop("The")
stop("The assay named", exprs)
stop(paste("The assay named", exprs))
exprs = "logcounts"
paste("The assay named", exprs)
paste("The assay named '", exprs, "' must be of class 'matrix'")
paste0("The assay named '", exprs, "' must be of class 'matrix'")
roxygenise()
library(BiocCheck)
BiocCheck()
library(roxygen2)
roxygenise()
library(BiocCheck)
BiocCheck()
?dist
proxy::dist()
proxy::dist
?proxy::dist
x <- matrix(rnorm(100), nrow = 5)
stats::dist(x)
stats::dist(x, method = "cosine")
proxy::dist(x, method = "cosine")
?importFrom
roxygenise()
?cor
?median
?prcomp
roxygenise()
?rbinom
?dnorm
?lines
?density
?approxfun
?integrate
?points
?rgb
?txtProgressBar
?metadata
showClass("metadata")
getAnywhere("metadata")
?aov
?aggregate
seq_along(10)
seq_len(10)
x = rnorm(100)
seq_along(x)
roxygenise()
news()
?news
?scMerge
utils::news("scMerge")
roxygenise()
utils::news("scMerge")
utils::news("scMerge")
roxygenise()
utils::news("scMerge")
library(scMerge)
utils::news("scMerge")
roxygenise()
BiocCheck()
BiocCheck()
library("scMerge", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
BiocCheck()
